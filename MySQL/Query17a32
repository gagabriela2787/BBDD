-- Active: 1692049675213@@127.0.0.1@3306@practicas

-- comentar Mostrar todos los datos de los alumnos que tengan notas.
SELECT nota, nombre
FROM alumnos
WHERE nota  IS NOT NULL;


--comentar Mostrar todos los datos de los alumnos que no tengan notas.

SELECT nota, nombre
FROM alumnos
WHERE nota  IS  NULL;


/*19) Realizar lo siguiente:
a. Agregar a través de Alter Table una en la tabla escuelas columna llamada “Partido”, a
la derecha de Localidad con una cadena vacía como valor por defecto (armar la
sentencia a través de Alter Table y ejecutar desde la consulta).
b. Ejecutar una consulta donde se vean todos los campos para confirmar que se ha
agregado el campo “partido”.
c. Eliminar esa columna utilizando Alter Tabla, no es necesario ejecutarlo desde la
consulta.*/

ALTER TABLE escuelas
ADD Partido VARCHAR(45);

SELECT * FROM escuelas;

ALTER TABLE escuelas
DROP Partido;

/* 20)
Agregar una nueva escuela utilizando Insert Statement (no agregar el ID). Ejecutar desde la
consulta:*/

INSERT INTO escuelas (nombre,localidad,provincia,capacidad)
VALUES ("Esc. N°2 Tomás Santa coloma", "Capital Federal", "Buenos Aires",250);


/*21) Utilizando Create Statement duplicar la tabla Alumnos. Analizar el código que se genera y
responder: ¿Qué función cumple el Auto_increment de la última línea? el AUTO_INCREMENT genera automáticamente un número único 
cuando se inserta un nuevo registro en una tabla.*/ 

CREATE TABLE new_alumnos AS
    SELECT ( id INT (11) NOT NULL AUTO_INCREMENT,
    id_escuela int(11) DEFAULT NULL,
    legajo INT(11) DEFAULT NULL,
    nombre VARCHAR(45) DEFAULT NULL,
    nota DECIMAL(10,0)DEFAULT NULL,
    grado INT(11) DEFAULT NULL,
    email VARCHAR(45) NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY (id_escuela) REFERENCES escuelas (id),
    FROM alumnos);

--22) Obtener un ranking de las primeras 3 escuelas de mayor capacidad.

SELECT nombre, capacidad
FROM escuelas
ORDER BY capacidad DESC
LIMIT 3;

/*23) Contar la cantidad de alumnos de la tabla homónima. Llamar a la columna “Cantidad de
alumnos”.*/

SELECT COUNT (id) AS "Cantidad de alumnos"
FROM alumnos;

--24) Repetir la consulta anterior consultando solamente cuya nota sea menor a 7.
SELECT COUNT (id)
FROM alumnos
WHERE notas=<7;

--25) Obtener la capacidad total de las escuelas de la provincia de Buenos Aires

SELECT SUM(capacidad)
FROM escuelas;

--26) Repetir el ejercicio anterior pero solamente con las escuelas de Córdoba y Jujuy
SELECT SUM(provincia)
FROM escuelas
WHERE provincia = "Jujuy" OR provincia = "Córdoba";
-- in ('buenos aires','jujuy','cordoba')

--27) Obtener el promedio de notas de los alumnos aprobados con más de 7
SELECT AVG(nota)
FROM alumnos
WHERE nota >7;

--28) Obtener la capacidad máxima y la capacidad mínima de alumnos (¿escuela?)
SELECT MIN( capacidad)
FROM escuelas;

SELECT MAX( capacidad)
FROM escuelas;
--SELECT MIN( capacidad), MIN FROM escuelas;



--29) Obtener el total de capacidad de las escuelas por provincia

SELECT COUNT(capacidad),nombre
FROM escuelas
GROUP BY provincia;


SELECT provincia, SUM(capacidad)
FROM escuelas
GROUP BY provincia;



SELECT provincia, SUM(capacidad) AS `Suma de capacidad`
FROM escuelas
GROUP BY provincia
ORDER BY `Suma de capacidad` DESC;

--30) Obtener la cantidad de alumnos por grado
 SELECT grado, COUNT(grado) AS 'Cantidad de alumnos'
FROM alumnos
GROUP BY grado
ORDER BY 2 DESC;


SELECT grado, nota
from alumnos
ORDER BY grado ASC, nota ASC;



/*31) Comparar las diferencias entre el uso de WHERE y HAVING: Mostrar las escuelas y la nota
máxima para cada una siempre y cuando sean mayores o iguales a 7.*/
SELECT escuelas.nombre, MAX(alumnos.nota)
FROM escuelas
INNER JOIN alumnos
ON id_escuela =alumnos.id_escuela
WHERE nota>7;




/*32) Mostrar la información de las escuelas cuyos alumnos tengan una nota igual a 10,
utilizando una subconsulta.*/


(SELECT id_escuelas FROM alumnos WHERE nota=10);
SELECT *
FROM escuelas
WHERE escuelas.id IN(SELECT id_escuela FROM alumnos WHERE nota>7);










